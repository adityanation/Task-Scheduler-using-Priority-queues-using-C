// -*- mode: c -*-
#include <stdio.h>
#include <stdlib.h>

// Structure to represent a task
typedef struct Task {
    int id;
    int priority;
    struct Task* next;
} Task;

// Function to create a new task
Task* createTask(int id, int priority) {
    Task* newTask = (Task*)malloc(sizeof(Task));
    newTask->id = id;
    newTask->priority = priority;
    newTask->next = NULL;
    return newTask;
}

// Function to insert a task into the priority queue
void insertTask(Task** head, int id, int priority) {
    Task* newTask = createTask(id, priority);
    if (*head == NULL || (*head)->priority < priority) {
        newTask->next = *head;
        *head = newTask;
    } else {
        Task* temp = *head;
        while (temp->next != NULL && temp->next->priority >= priority) {
            temp = temp->next;
        }
        newTask->next = temp->next;
        temp->next = newTask;
    }
}

// Function to execute tasks based on priority
void executeTasks(Task** head) {
    while (*head != NULL) {
        Task* temp = *head;
        printf("Executing Task ID: %d with Priority: %d\n", temp->id, temp->priority);
        *head = (*head)->next;
        free(temp);
    }
}

// Driver code
int main() {
    Task* taskQueue = NULL;
    insertTask(&taskQueue, 1, 2);
    insertTask(&taskQueue, 2, 1);
    insertTask(&taskQueue, 3, 3);
    insertTask(&taskQueue, 4, 5);
    insertTask(&taskQueue, 5, 4);

    printf("Task Execution Order:\n");
    executeTasks(&taskQueue);
    return 0;
}
